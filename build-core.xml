<?xml version="1.0" ?>

<project name="mainBuild" default="help">

    <tstamp>
        <format property="current.date" pattern="yyyyMMdd"/>
    </tstamp>

    <!-- change on project creation: app.name -->

    <property name="app.vendor" value="Columbia University - DSI"/>
    <property name="lib.dir" location="lib"/>
    <property name="dsi-lib.dir" location="dsi-lib"/>
    <property name="dist.dir" location="dist"/>
    <property name="classes.dir" location="classes"/>
    <property name="instrumented.dir" location="${classes.dir}/instrumented"/>
    <property name="doc.dir" location="doc"/>
    <property name="resources.dir" location="resources/"/>
    <property name="work.dir" location="workDir/"/>
    <property name="config.dir" location="config/"/>
    <property name="javadoc.dir" location="${doc.dir}/javadoc"/>
    <property name="test.reports.dir" location="doc/test-reports"/>
    <property name="test.dir" location="test"/>
    <property name="src.dir" location="src"/>
    <property name="include.package.name" value="edu.columbia.dsi.**.**.**"/>
    <property name="exclude.package" value="edu.columbia.dsi.doc-files.**"/>
	<property name="username" value=""/>
	<property name="remote.datafile.loc" value="ghazali.ldeo.columbia.edu:/export/projects/nlp/nadia/datafiles/${ant.project.name}"/>
	
	<property name="baseDirUpOne" location=".." />  
	<property name="obfuscator.home" value="${baseDirUpOne}/Obfuscator"/>
	<property name="obfuscator.dist" value="${obfuscator.home}/dist"/>
	<property name="obfuscator.config" value="${obfuscator.home}/config"/>
	<property name="original.jar.name" value="original.jar" />
	<property name="obfuscated.jar.name" value="obfuscated.jar" />
    <property name="obfuscator.default.cfg.name" value="obfuscation.config.cfg" />
	

	<!-- dependencies for compilation -->
	<path id="classpath.base">
        <path refid="dependency.classpath"/>
		<pathelement path="${classes.dir}"/>
        <fileset dir="${dsi-lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
			<include name="*.jar"/>
		</fileset>
        <pathelement path="${config.dir}"/>
        <pathelement path="${resources.dir}"/>
        <pathelement path="${work.dir}"/>
        <pathelement path="${resources.dir}schema/"/>
    </path>


    <!-- dependencies for test compilation -->
    <path id="classpath.test">
        <path refid="classpath.base"/>
        <fileset dir="dsi-lib" />
        <fileset dir="lib">
            <exclude name="ant-1.7.0.jar"/>
        </fileset>
    </path>

    <target name="help">
        <echo message="Usage: ant [arg]"/>
        <echo message="Arguments - "/>
        <echo message="   clean: clean all binaries"/>
        <echo message="   compile: compile source dir without obfuscation"/>		
		<echo message="   dist: create a distribution version"/>
        <echo message="   obfuscation-dist: create an obfuscated distribution version"/>
        <echo message="   doc: generate javadoc documentation"/>
        <echo message="   run: deploy instrumented war to tomcat webapps dir as (path) defined in deploy.xml"/>
        <echo message="   test: run unit test and generate test results"/>
        <echo message="   test-report: run unit test and generate coverage report"/>
		<echo message="   get-resources: Convenience task for (over)writing local data files with content from remote datafile location. Note: no file is deleted in this process, so any cleanup work has to be done manually. Usage: ant -Dusername=me get-resources"/>
        <!--
        <echo message="   put-resources: Convenience task for (over)writing remote data files with content from local datafiles. Note: no file is deleted in this process, so any cleanup work has to be done manually. Usage: ant -Dusername=me put-resources"/>
        -->
    </target>


    <target name="clean">
        <echo message="cleaning previously generated files..."/>
        <delete dir="${classes.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${javadoc.dir}"/>
        <delete dir="${test.reports.dir}"/>
        <delete>
            <fileset dir="${dsi-lib.dir}" includes="**/*.jar"/>
        </delete>
        <delete>
                <fileset dir="${lib.dir}" includes="**/*.jar"/>
        </delete>
    </target>


    <!-- gets third-party libs generated by maven -->
    <target name="copy-libs">
        <copy todir="${lib.dir}" >
            <fileset refid="dependency.fileset"/>
            <mapper type="flatten" />
        </copy>
    </target>



   


    <target name="compile" depends="clean, copy-libs">
        <mkdir dir="${classes.dir}"/>
        <javac destdir="${classes.dir}" debug="on" srcdir="${src.dir}" includeantruntime="false">
            <classpath refid="classpath.base"/>
        </javac>
    </target>


    <!--  Original Dist command, without Obfuscation -->
    <target name="dist" depends="compile">
        <condition property="user.manual.present">
            <and>
                <available file="${doc.dir}/${manual.name}"/>
            </and>
        </condition>
        <fail message="Please add ${doc.dir}/${manual.name} in order to create a distribution"
              unless="user.manual.present"/>

        <mkdir dir="${dist.dir}/${release.name}"/>

        <jar destfile="${dist.dir}/${release.name}/${release.name}.jar">
            <fileset dir="${classes.dir}" includes="**/*"/>
            <manifest>
                <attribute name="Main-Class" value="${src.main.name}"/>
                <attribute name="Implementation-Title" value="${app.name}"/>
                <attribute name="Implementation-Version" value="${app.version}"/>
                <attribute name="Class-Path" value="config/ resources/ workDir/"/>
                <attribute name="Created-By" value="DSI Columbia University"/>
            </manifest>
            <zipgroupfileset dir="${lib.dir}" includes="**/*.jar" />
        </jar>

        <copy file="${doc.dir}/${manual.name}" tofile="${dist.dir}/${release.name}/${manual.name}"/>
        <copy todir="${dist.dir}/${release.name}/resources">
            <fileset dir="${resources.dir}"/>
        </copy>
        
        <copy todir="${dist.dir}/${release.name}/workDir">
            <fileset dir="${work.dir}"/>
        </copy>
        
        <copy todir="${dist.dir}/${release.name}/config">
            <fileset dir="${config.dir}">
                <exclude name="obfuscation.*.cfg*"/>
            </fileset>
        </copy>

        <zip destfile="${dist.dir}/${release.name}.zip" basedir="${dist.dir}/"/>
    </target>


    <!-- Builds distribution jar,resources,configs,etc. in Obfuscation project directory,
         then runs Obfuscation tool, cleans up, and copies back to original project -->
    <target name="obfuscation-dist" depends="compile">
		<condition property="user.manual.present">
            <and>
                <available file="${doc.dir}/${manual.name}"/>
            </and>
        </condition>
        <fail message="Please add ${doc.dir}/${manual.name} in order to create a distribution"
              unless="user.manual.present"/>

		<delete dir="${obfuscator.dist}"/>
        <mkdir dir="${obfuscator.dist}"/>

        <!-- DEPENDENT LIBRARIES -->
        <copy todir="${obfuscator.dist}/third-party/">
            <fileset dir="${lib.dir}"/>
        </copy>

        <fileset id="third-party.contents" dir="${obfuscator.dist}/" includes="**/*"/>
        <pathconvert targetos="unix" property="third-party.contents.unix" refid="third-party.contents" pathsep=" ">
            <map from="${obfuscator.dist}/" to=""/>
        </pathconvert>

        <copy todir="${obfuscator.dist}/dsi-lib/">
            <fileset dir="${dsi-lib.dir}"/>
        </copy>
		
		<jar destfile="${obfuscator.dist}/${original.jar.name}">
            <fileset dir="${classes.dir}" includes="**/*"/>
            <manifest>
                <attribute name="Main-Class" value="${src.main.name}"/>
                <attribute name="Implementation-Title" value="${app.name}"/>
                <attribute name="Implementation-Version" value="${app.version}"/>
                <attribute name="Class-Path" value="${third-party.contents.unix}  config/ resources/ resources/schema/ resources/dictionary/ workDir/"/>
                <attribute name="Created-By" value="DSI Columbia University"/>
            </manifest>
        </jar>
		
		<copy file="${doc.dir}/${manual.name}" tofile="${obfuscator.dist}/${manual.name}"/>
        <copy todir="${obfuscator.dist}/resources">
            <fileset dir="${resources.dir}"/>
        </copy>

        <copy todir="${obfuscator.dist}/workDir">
            <fileset dir="${work.dir}"/>
        </copy>

        <copy todir="${obfuscator.dist}/config">
            <fileset dir="${config.dir}">
                <exclude name="obfuscation.*.cfg*"/>
			</fileset>
        </copy>
		
		
		<copy file="${config.dir}/${obfuscator.cfg.name}" tofile="${obfuscator.config}/${obfuscator.default.cfg.name}"/>

        <!-- Run Proguard Obfuscator tool -->
        <subant target="obfuscate">
		  <fileset dir="${obfuscator.home}" includes="build.xml"/>
		</subant>

        <!-- Remove the Obfuscator config -->
		<delete file="${obfuscator.config}/${obfuscator.default.cfg.name}"/>

        <!-- Rename the obfuscated .jar file -->
		<move file="${obfuscator.dist}/${obfuscated.jar.name}" tofile="${obfuscator.dist}/${release.name}.jar"/>
		<!-- Remove the temporary, unobfuscated project .jar file and unnecessary dsi-lib direcory -->
        <delete file="${obfuscator.dist}/${original.jar.name}"/>
        <delete dir="${obfuscator.dist}/dsi-lib"/>
        <!-- Copy the obfuscated .jar and its support directories back to the original project directory -->
		<mkdir dir="${dist.dir}/${release.name}"/>		
		<copy todir="${dist.dir}/${release.name}">
			<fileset dir="${obfuscator.dist}"/>
		</copy>
		<delete dir="${obfuscator.dist}"/>
	
		<zip destfile="${dist.dir}/${release.name}.zip" basedir="${dist.dir}/"/>
    </target>





    <target name="jar" depends="dist">
		<copy todir="${dist.dir}">
			<fileset dir="${dist.dir}/${release.name}"/>
		</copy>
		<delete dir="${dist.dir}/${release.name}"/>
		<delete file="${dist.dir}/${release.name}.zip"/>
    </target>





    <target name="doc" depends="clean">
        <javadoc packagenames="${include.package.name}" sourcepath="src" excludepackagenames="${exclude.package}"
                 defaultexcludes="yes" destdir="${javadoc.dir}" author="true" version="true" use="true"
                 windowtitle="${app.name}">
            <classpath refid="classpath.base"/>
            <doctitle>
                <![CDATA[<h1>${app.name}</h1>]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; 2012 Columbia University. All Rights Reserved.</i>]]>
            </bottom>
            <tag name="todo" scope="all" description="To do:"/>
            <link href="http://docs.oracle.com/javase/7/docs/api/"/>
            <link href="http://commons.apache.org/io/apidocs/"/>
        </javadoc>
    </target>






    <!--
     Note: Set command line arguments (see ARGUMENTS)
     -->
    <target name="run" depends="compile">
        <java classname="${src.main.name}" fork="yes">
            <classpath refid="classpath.base"/>
            <jvmarg value="${max.heap.size}"/>
            <!-- ARGUMENTS -->
            <arg value="-s"/>
        </java>
    </target>
	
    <target name="get-resources">
        <scp trust="true"  file="${username}@${remote.datafile.loc}/*" todir="." passphrase="nadia" keyfile="../id_dsa" verbose="yes">
            <fileset dir="{remotehostinfo}:/home/filesdir/src_dir" excludes="**/*.java"/>
        </scp>
    </target>


    <target name="compile-tests" description="compile test classes" depends="compile">
        <javac destdir="${classes.dir}" debug="on" srcdir="test" includeantruntime="false">
            <classpath refid="classpath.test"/>
        </javac>
    </target>


    <target name="test" description="run test code" depends="compile-tests">
        <mkdir dir="${test.reports.dir}"/>
        <junit printsummary="yes" haltonfailure="no" haltonerror="no">
            <classpath refid="classpath.test"/>
            <jvmarg value="${max.heap.size}"/>
            <formatter type="plain"/>
            <batchtest fork="yes" todir="${test.reports.dir}">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>


    <target name="test-report" depends="compile-tests">
        <taskdef classpathref="classpath.test" resource="tasks.properties"/>
        <mkdir dir="${test.reports.dir}"/>
        <mkdir dir="${instrumented.dir}"/>

        <cobertura-instrument todir="${instrumented.dir}">
            <fileset dir="${classes.dir}">
                <include name="**/*.class"/>
                <exclude name="**/*Test.class"/>
            </fileset>
        </cobertura-instrument>

        <junit fork="yes" dir="." failureProperty="test.failed">
            <jvmarg line="${max.heap.size} -XX:-UseSplitVerifier"/>
            <!--
                           Specify the name of the coverage data file to use.
                           The value specified below is the default.
                       -->
            <sysproperty key="net.sourceforge.cobertura.datafile" file="cobertura.ser"/>

            <!--
                           Note the classpath order: instrumented classes are before the
                           original (uninstrumented) classes.  This is important.
                       -->
            <classpath location="${instrumented.dir}"/>
            <classpath location="${classes.dir}"/>

            <!--
                           The instrumented classes reference classes used by the
                           Cobertura runtime, so Cobertura and its dependencies
                           must be on your classpath.
                       -->
            <classpath refid="classpath.test"/>

            <formatter type="xml"/>
            <batchtest fork="yes" todir="${test.reports.dir}">
                <fileset dir="${test.dir}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>

        <cobertura-report format="html" destdir="${test.reports.dir}" srcdir="${src.dir}"/>

        <delete file="cobertura.ser"/>
    </target>


    <target name="test-build" description="runs all targets" depends="help, compile, run, dist, jar, test, test-report, doc">
        <echo message="**IMPORTANT**: Remember to run get-resources target separately prior to running test-build target if resources are required for the project."/>
    </target>
	
	
	<target name="obfuscator">
		<subant target="obfuscate">
		  <fileset dir="${obfuscator.home}" includes="build.xml"/>
		</subant>
	</target>
	
	
	
	
</project>
